<?xml version="1.0"?>
<doc>
    <assembly>
        <name>JVermeulen.Processing</name>
    </assembly>
    <members>
        <member name="T:JVermeulen.Processing.Actor">
            <summary>
            Concurrent processing of messages using the Actor model.
            </summary>
        </member>
        <member name="P:JVermeulen.Processing.Actor.Inbox">
            <summary>
            The MessageBox for incoming messages.
            </summary>
        </member>
        <member name="P:JVermeulen.Processing.Actor.Outbox">
            <summary>
            The MessageBox for outgoing messages.
            </summary>
        </member>
        <member name="P:JVermeulen.Processing.Actor.OptionSendHeartbeatToOutbox">
            <summary>
            When true, generated heartbeats are send to the Outbox. Default is false.
            </summary>
        </member>
        <member name="P:JVermeulen.Processing.Actor.OptionSendStatusChangedToOutbox">
            <summary>
            When true, status changes are send to the Outbox. Default is true.
            </summary>
        </member>
        <member name="P:JVermeulen.Processing.Actor.HeartbeatProvider">
            <summary>
            Generates heartbeat at the given interval.
            </summary>
        </member>
        <member name="P:JVermeulen.Processing.Actor.OptionHeartbeatInterval">
            <summary>
            The interval between heartbeats. Requires (re)start.
            </summary>
        </member>
        <member name="M:JVermeulen.Processing.Actor.#ctor(System.TimeSpan,System.Reactive.Concurrency.IScheduler)">
            <summary>
            The constructor of this class.
            </summary>
            <param name="heartbeatInterval">The time between heartbeats. When default, no heartbeats will be generated.</param>
            <param name="scheduler">The scheduler of the Outbox. When null, a new EventLoopScheduler is used.</param>
        </member>
        <member name="M:JVermeulen.Processing.Actor.OnReceive(JVermeulen.Processing.SessionMessage)">
            <summary>
            Process messages from the Inbox.
            </summary>
            <param name="message">The message to process.</param>
        </member>
        <member name="M:JVermeulen.Processing.Actor.Subscribe(System.Action{JVermeulen.Processing.SessionMessage},System.Action{System.Exception})">
            <summary>
            Subscribe to the Outbox.
            </summary>
            <param name="onNext">What to do with messages received from Outbox.</param>
            <param name="onError">What to do with errors occured in the onNext action.</param>
        </member>
        <member name="M:JVermeulen.Processing.Actor.OnStarting">
            <summary>
            Sends the new status to the Outbox.
            </summary>
        </member>
        <member name="M:JVermeulen.Processing.Actor.OnStarted">
            <summary>
            Sends the new status to the Outbox.
            </summary>
        </member>
        <member name="M:JVermeulen.Processing.Actor.OnStopping">
            <summary>
            Sends the new status to the Outbox.
            </summary>
        </member>
        <member name="M:JVermeulen.Processing.Actor.OnStopped">
            <summary>
            Sends the new status to the Outbox.
            </summary>
        </member>
        <member name="M:JVermeulen.Processing.Actor.OnHeartbeat(JVermeulen.Processing.Heartbeat)">
            <summary>
            A heartbeat has been generated.
            </summary>
            <param name="heartbeat">The heartbeat message.</param>
        </member>
        <member name="M:JVermeulen.Processing.Actor.Subscribe(System.IObserver{JVermeulen.Processing.SessionMessage})">
            <summary>
            Subscribes a message handler.
            </summary>
            <param name="observer">The handler.</param>
        </member>
        <member name="M:JVermeulen.Processing.Actor.SubscribeSafe(System.Action{JVermeulen.Processing.SessionMessage},System.Action{System.Exception},System.Func{JVermeulen.Processing.SessionMessage,System.Boolean})">
            <summary>
            Subscribe to the Outbox.
            </summary>
            <param name="onNext">What to do with messages received from Outbox.</param>
            <param name="onError">What to do with errors occured in the onNext action.</param>
            <param name="where">A function to test each source element for a condition.</param>
        </member>
        <member name="M:JVermeulen.Processing.Actor.SubscribeSafe``1(System.Action{JVermeulen.Processing.SessionMessage},System.Action{System.Exception},System.Int32)">
            <summary>
            Subscribe to the actor. T is the Value type to check for.
            </summary>
            <param name="onNext">What to do with messages received from Outbox.</param>
            <param name="onError">What to do with errors occured in the onNext action.</param>
            <param name="recursive">When true, checks for the inner SessionMessage.</param>
        </member>
        <member name="M:JVermeulen.Processing.Actor.SubscribeSafe``2(System.Action{JVermeulen.Processing.SessionMessage},System.Action{System.Exception},System.Int32)">
            <summary>
            Subscribe to the actor. T is the Value type to check for.
            </summary>
            <param name="onNext">What to do with messages received from Outbox.</param>
            <param name="onError">What to do with errors occured in the onNext action.</param>
            <param name="recursive">When true, checks for the inner SessionMessage.</param>
        </member>
        <member name="M:JVermeulen.Processing.Actor.SubscribeSafe``3(System.Action{JVermeulen.Processing.SessionMessage},System.Action{System.Exception},System.Int32)">
            <summary>
            Subscribe to the actor. T is the Value type to check for.
            </summary>
            <param name="onNext">What to do with messages received from Outbox.</param>
            <param name="onError">What to do with errors occured in the onNext action.</param>
            <param name="recursive">When true, checks for the inner SessionMessage.</param>
        </member>
        <member name="T:JVermeulen.Processing.Heartbeat">
            <summary>
            Represents a heartbeat.
            </summary>
        </member>
        <member name="P:JVermeulen.Processing.Heartbeat.Count">
            <summary>
            The incremented number of this heartbeat, starting with 0.
            </summary>
        </member>
        <member name="M:JVermeulen.Processing.Heartbeat.#ctor(System.Int64)">
            <summary>
            The constructor of this class.
            </summary>
            <param name="count">The incremented number of this heartbeat, starting with 0.</param>
        </member>
        <member name="M:JVermeulen.Processing.Heartbeat.ToString">
            <summary>
            A String that represents the current object.
            </summary>
        </member>
        <member name="T:JVermeulen.Processing.HeartbeatProvider">
            <summary>
            Generates heartbeat at the given interval.
            </summary>
        </member>
        <member name="P:JVermeulen.Processing.HeartbeatProvider.Interval">
            <summary>
            The interval between heartbeats. When default, no heartbeats will be generated. Requires (re)start after change.
            </summary>
        </member>
        <member name="P:JVermeulen.Processing.HeartbeatProvider.Cancellation">
            <summary>
            Internal cancel.
            </summary>
        </member>
        <member name="M:JVermeulen.Processing.HeartbeatProvider.#ctor(System.TimeSpan,System.Reactive.Concurrency.IScheduler)">
            <summary>
            The constructor of this class.
            </summary>
            <param name="interval">The interval between heartbeats. When default, no heartbeats will be generated.</param>
            <param name="scheduler">The Scheduler to use.</param>
        </member>
        <member name="M:JVermeulen.Processing.HeartbeatProvider.Dispose">
            <summary>
            Dispose this object.
            </summary>
        </member>
        <member name="T:JVermeulen.Processing.ISession">
            <summary>
            An interface for the session pattern.
            </summary>
        </member>
        <member name="M:JVermeulen.Processing.ISession.Start">
            <summary>
            Start the session.
            </summary>
        </member>
        <member name="M:JVermeulen.Processing.ISession.Stop">
            <summary>
            Stop the session.
            </summary>
        </member>
        <member name="M:JVermeulen.Processing.ISession.Restart">
            <summary>
            Stop and start the session.
            </summary>
        </member>
        <member name="T:JVermeulen.Processing.MessageBox`1">
            <summary>
            A queue of messages you can subscribe to. Message are handled one-by-one.
            </summary>
            <typeparam name="T">The message type.</typeparam>
        </member>
        <member name="P:JVermeulen.Processing.MessageBox`1.Scheduler">
            <summary>
            The Scheduler that handles messages.
            </summary>
        </member>
        <member name="P:JVermeulen.Processing.MessageBox`1.Messages">
            <summary>
            The internal message used for the Queue.
            </summary>
        </member>
        <member name="P:JVermeulen.Processing.MessageBox`1.Observer">
            <summary>
            The internal queue to subscribe to.
            </summary>
        </member>
        <member name="P:JVermeulen.Processing.MessageBox`1.NumberOfMessagesPending">
            <summary>
            The number of processed messages from the queue.
            </summary>
        </member>
        <member name="P:JVermeulen.Processing.MessageBox`1.NumberOfMessagesProcessed">
            <summary>
            The number of pending messages in the Queue.
            </summary>
        </member>
        <member name="P:JVermeulen.Processing.MessageBox`1.OptionWriteToConsole">
            <summary>
            When true, processed messages are send to the Console. Default is false.
            </summary>
        </member>
        <member name="M:JVermeulen.Processing.MessageBox`1.#ctor(System.Reactive.Concurrency.IScheduler)">
            <summary>
            The constructor of this class.
            </summary>
            <param name="scheduler">The Scheduler that handles messages. When null, a new EventLoopScheduler will be created.</param>
        </member>
        <member name="M:JVermeulen.Processing.MessageBox`1.Subscribe(System.IObserver{`0})">
            <summary>
            Subscribes a message handler.
            </summary>
            <param name="observer">The handler.</param>
        </member>
        <member name="M:JVermeulen.Processing.MessageBox`1.SubscribeSafe(System.Action{`0},System.Action{System.Exception},System.Func{`0,System.Boolean})">
            <summary>
            Subscribe to the observer.
            </summary>
            <param name="onNext">What to do with messages received from Outbox.</param>
            <param name="onError">What to do with errors occured in the onNext action.</param>
            <param name="where">A function to test each source element for a condition.</param>
        </member>
        <member name="M:JVermeulen.Processing.MessageBox`1.ActionAndCatch(System.Action{`0},System.Action{System.Exception})">
            <summary>
            Cathes exceptions occured in the action.
            </summary>
            <param name="action">The action to invoke.</param>
            <param name="catchAction">What to do with errors occured in the action.</param>
        </member>
        <member name="M:JVermeulen.Processing.MessageBox`1.Add(`0)">
            <summary>
            Sends the given message to the Queue and to the subscribers.
            </summary>
            <param name="message">The message to send.</param>
        </member>
        <member name="M:JVermeulen.Processing.MessageBox`1.OnReceive(`0)">
            <summary>
            Internal subscription to the queue.
            </summary>
            <param name="message">The received message.</param>
        </member>
        <member name="M:JVermeulen.Processing.MessageBox`1.OnError(System.Exception)">
            <summary>
            What to do with errors occured in the action.
            </summary>
            <param name="ex">The occured exception.</param>
        </member>
        <member name="M:JVermeulen.Processing.MessageBox`1.Dispose">
            <summary>
            Disposes this object.
            </summary>
        </member>
        <member name="T:JVermeulen.Processing.Session">
            <summary>
            A startable and stoppable session with meta info.
            </summary>
        </member>
        <member name="P:JVermeulen.Processing.Session.Id">
            <summary>
            A unique Id for this session.
            </summary>
        </member>
        <member name="P:JVermeulen.Processing.Session.Status">
            <summary>
            The current status of this session.
            </summary>
        </member>
        <member name="P:JVermeulen.Processing.Session.StartedAt">
            <summary>
            The timestamp this session started.
            </summary>
        </member>
        <member name="P:JVermeulen.Processing.Session.StoppedAt">
            <summary>
            The timestamp this session stopped.
            </summary>
        </member>
        <member name="P:JVermeulen.Processing.Session.Elapsed">
            <summary>
            The duration between StartedAt and StoppedAt. If this session is not stopped, the current time will be used.
            </summary>
        </member>
        <member name="M:JVermeulen.Processing.Session.#ctor">
            <summary>
            The constructor of this class.
            </summary>
        </member>
        <member name="M:JVermeulen.Processing.Session.Start">
            <summary>
            Starts the session.
            </summary>
        </member>
        <member name="M:JVermeulen.Processing.Session.Stop">
            <summary>
            Stops the session.
            </summary>
        </member>
        <member name="M:JVermeulen.Processing.Session.OnStarting">
            <summary>
            Invoked at the beginning of the Start.
            </summary>
        </member>
        <member name="M:JVermeulen.Processing.Session.OnStarted">
            <summary>
            Invoked at the end of the Start.
            </summary>
        </member>
        <member name="M:JVermeulen.Processing.Session.OnStopping">
            <summary>
            Invoked at the beginning of the Stop.
            </summary>
        </member>
        <member name="M:JVermeulen.Processing.Session.OnStopped">
            <summary>
            Invoked at the end of the Stop.
            </summary>
        </member>
        <member name="M:JVermeulen.Processing.Session.Restart">
            <summary>
            Stops and starts the session.
            </summary>
        </member>
        <member name="M:JVermeulen.Processing.Session.Dispose">
            <summary>
            Disposes this object.
            </summary>
        </member>
        <member name="T:JVermeulen.Processing.SessionMessage">
            <summary>
            A generic session message.
            </summary>
        </member>
        <member name="P:JVermeulen.Processing.SessionMessage.Id">
            <summary>
            A unique Id for this message.
            </summary>
        </member>
        <member name="P:JVermeulen.Processing.SessionMessage.CreatedAt">
            <summary>
            The time this message has been created.
            </summary>
        </member>
        <member name="P:JVermeulen.Processing.SessionMessage.Sender">
            <summary>
            The sender of this message.
            </summary>
        </member>
        <member name="P:JVermeulen.Processing.SessionMessage.Value">
            <summary>
            The value of this message.
            </summary>
        </member>
        <member name="M:JVermeulen.Processing.SessionMessage.#ctor(JVermeulen.Processing.Session,System.Object)">
            <summary>
            The constructor of this class.
            </summary>
            <param name="sender">The sender of this message.</param>
            <param name="value">The value of this message.</param>
        </member>
        <member name="M:JVermeulen.Processing.SessionMessage.ValueIsTypeof(System.Collections.Generic.List{System.Type},System.Int32)">
            <summary>
            Checks if the Value is of the given type.
            </summary>
            <param name="types">The types to check for.</param>
            <param name="recursive">When true, checks for the inner SessionMessage.</param>
            <returns></returns>
        </member>
        <member name="M:JVermeulen.Processing.SessionMessage.ValueIsTypeof``1(System.Int32)">
            <summary>
            Checks if the Value is of the given type. T is the type to check for.
            </summary>
            <param name="recursive">When true, checks for the inner SessionMessage.</param>
        </member>
        <member name="M:JVermeulen.Processing.SessionMessage.ValueIsTypeof``2(System.Int32)">
            <summary>
            Checks if the Value is of the given type. Tx is the types to check for.
            </summary>
            <param name="recursive">When true, checks for the inner SessionMessage.</param>
        </member>
        <member name="M:JVermeulen.Processing.SessionMessage.ValueIsTypeof``3(System.Int32)">
            <summary>
            Checks if the Value is of the given type. Tx is the types to check for.
            </summary>
            <param name="recursive">When true, checks for the inner SessionMessage.</param>
        </member>
        <member name="M:JVermeulen.Processing.SessionMessage.ToString">
            <summary>
            A String that represents the current object.
            </summary>
        </member>
        <member name="T:JVermeulen.Processing.SessionStatus">
            <summary>
            The status of the session.
            </summary>
        </member>
        <member name="F:JVermeulen.Processing.SessionStatus.Stopped">
            <summary>
            The session is stopped.
            </summary>
        </member>
        <member name="F:JVermeulen.Processing.SessionStatus.Started">
            <summary>
            The session is started.
            </summary>
        </member>
        <member name="F:JVermeulen.Processing.SessionStatus.Stopping">
            <summary>
            The session is stopping.
            </summary>
        </member>
        <member name="F:JVermeulen.Processing.SessionStatus.Starting">
            <summary>
            The session is starting.
            </summary>
        </member>
        <member name="T:JVermeulen.Processing.ValueCounter">
            <summary>
            Counts a value.
            </summary>
        </member>
        <member name="P:JVermeulen.Processing.ValueCounter.InitialValue">
            <summary>
            The value to start with.
            </summary>
        </member>
        <member name="P:JVermeulen.Processing.ValueCounter.Value">
            <summary>
            The current value.
            </summary>
        </member>
        <member name="P:JVermeulen.Processing.ValueCounter.Max">
            <summary>
            The maximum value used for calculating progress.
            </summary>
        </member>
        <member name="M:JVermeulen.Processing.ValueCounter.#ctor(System.Int64)">
            <summary>
            The constructor of this class.
            </summary>
            <param name="initialValue">The value to start with.</param>
        </member>
        <member name="M:JVermeulen.Processing.ValueCounter.OnStarting">
            <summary>
            Sets the value to the initial value.
            </summary>
        </member>
        <member name="M:JVermeulen.Processing.ValueCounter.Increment">
            <summary>
            Adds 1 to the value.
            </summary>
            <returns>The value after the increment.</returns>
        </member>
        <member name="M:JVermeulen.Processing.ValueCounter.Decrement">
            <summary>
            Substracts 1 of the value.
            </summary>
            <returns>The value after the decrement.</returns>
        </member>
        <member name="M:JVermeulen.Processing.ValueCounter.Add(System.Int64)">
            <summary>
            Adds (or substracts) the given value to value.
            </summary>
            <param name="value">The value to add.</param>
            <returns>The value after the add.</returns>
        </member>
        <member name="M:JVermeulen.Processing.ValueCounter.GetStatistics(System.Boolean,System.Int64@,System.TimeSpan@,System.Double@,System.Double@)">
            <summary>
            Calculates statistics about this counter.
            </summary>
            <param name="reset">When true, resets this counter after the statistics are calculated.</param>
            <param name="value">The current value.</param>
            <param name="duration">The duration since this counter started.</param>
            <param name="valuesPerSecond">The value per second since this counter started.</param>
            <param name="percentage">The percentage of Value/Max.</param>
        </member>
    </members>
</doc>
